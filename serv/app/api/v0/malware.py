# -*- coding: utf-8 -*-
"""Malware API module.
This module define every API related to malware or artefacts.
"""
from __future__ import print_function, absolute_import

import os
import geoip2.database

from . import __api_prefix__
from werkzeug import secure_filename

from geoip2.errors import AddressNotFoundError
from flask import request

from flask.ext.classy import FlaskView, route
from app.extensions import mongo


class MalwareView(FlaskView):
    route_prefix = __api_prefix__

    @route("/info/<sha256:hash>", methods=['GET'])
    @route("/info/<sha256:hash>/", methods=['GET'], defaults={'type': 'json'})
    def info(self, hash, type=None):
        if hash:
            assets = mongo.db.assets
            query = assets.find({"$or": [{"ssdeep": {"$eq": hash}}, {"md5": {"$eq": hash}}, {"sha1": {"$eq": hash}}, {"sha256": {"$eq": hash}},{"sha512": {"$eq": hash}}]})
            if query.count() == 0:
                if type == "json":
                    return jsonify(res={"ecode": 404, "info": "Not Found", "data": {}})
                else:
                    return jsonify(res={"ecode": 404, "info": "Not Found", "data": {}})
            elif query.count() == 1:
                for q in query:
                    if type == "json":
                        return jsonify(res={"ecode": 200, "info": "Found", "data": get_data(q)})
                    else:
                        return jsonify(res={"ecode": 200, "info": "Found", "data": get_data(q)})
            else:
                if type == "json":
                    return jsonify(res={"ecode": 500, "info": "Something went wrong", "data": ""})
                else:
                    return jsonify(res={"ecode": 500, "info": "Something went wrong", "data": ""})
        return jsonify(res={"ecode": 302, "info": "No hash provided", "data": {}})

    @route("/tree/<sha256:hash>", methods=['GET'])
    def tree(self, hash):
        pass

    @route('/submit', methods=['POST'])
    def submit(self):
        file = request.files['artifact']
        filename = secure_filename(file.filename)
        file.save(os.path.join(app.config['TMP_UPLOAD_FOLDER'], filename))
        if os.path.isfile(os.path.join(app.config['BIN_UPLOAD_FOLDER'], filename)):
            return jsonify(res={"ecode": 302, "msg": "Asset already analysed", "goto": url_for("MalwareView:info", hash=filename, type=type)})
        ## Celery
        obj = {
            "path": os.path.join(app.config['TMP_UPLOAD_FOLDER'], filename)
        }
        reader = geoip2.database.Reader(app.config['MAXMAIN_DB_CITIES'])
        try:
            response = reader.city(request.remote_addr)
        except (AddressNotFoundError):
            obj["ipMeta"] = [{
                                "city": "unknown",
                                "ip": request.remote_addr,
                                "country": "unknown",
                                "iso_code": "unknown",
                                "date": datetime.utcnow(),
                                "geo": [0.0, 0.0]
                            }]
        else:
            obj["ipMeta"] = [{
                                "city": response.city.name,
                                "ip": request.remote_addr,
                                "country": response.country.name,
                                "iso_code": response.country.iso_code,
                                "date": datetime.utcnow(),
                                "geo": [response.location.longitude, response.location.latitude]
                            }]
        # Celery task
        print("Sending: {}".format(obj))
        task_id = analysis.delay(memt_dumps(obj))
        return jsonify(res={"ecode": 200, "msg": "Analysis hsa been lunch in background", "goto": url_for("MalwareView:info", hash=filename, type=type), "task_id": task_id.id})


def get_data(malware):
    obj = {}
    obj["ssdeep"] = malware["ssdeep"]
    obj["md5"] = malware["md5"]
    obj["sha1"] = malware["sha1"]
    obj["sha256"] = malware["sha256"]
    obj["sha512"] = malware["sha512"]
    obj["format"] = malware["format"]
    obj["symbols"] = malware["symbols"]
    obj["imports"] = malware["imports"]
    obj["sections"] = malware["sections"]
    obj["arch"] = malware["arch"]
    obj["strain"] = malware["strain"]
    obj["mutations"] = []
    obj["siblings"] = []
    if obj["strain"] == "":  # This is a strain
        obj["mutations"] = malware["mutations"]
    else:  # This is a mutation
        assets = mongo.db.assets
        strains = assets.find({"sha256": obj["strain"]})
        for strain in strains:
            if strain["mutations"] != obj["sha256"]:
                obj["siblings"].append(strain["mutations"])
        obj["siblings"].remove(obj["sha256"])
    return obj
